# This workflow handles Go builds with optional Sonar analysis.
# It can be called from other workflows and supports different build modes based on:
# - Actor type (bot or user)
#
# Build steps:
#  - Automatically detects Go module location using go.mod file
#  - Runs tests with coverage
#  - Sonar analysis (if not skipped for restricted actors)
#
# Sonar analysis:
# - Only runs if both sonar-project-key and sonar-token are provided
# - Always skipped for restricted actors
# - Requires proper Sonar configuration (organization, host URL, etc.)
#
# Restricted actors:
# - Defined in .github/config/build-config.yaml
# - Cannot run Sonar analysis
#
# Working directory:
# - Automatically detected based on go.mod file location
# - All Go commands are executed in the directory containing go.mod

name: Go build + Sonar

on:
  workflow_call:
    inputs:
      # Event information
      actor:
        description: 'GitHub actor (user or bot) that triggered the workflow'
        required: true
        type: string

      # Go module configuration
      go-module-dir:
        description: 'Optional directory containing go.mod file. If not specified, will search for go.mod files in the repository.'
        required: false
        type: string

      # Sonar configuration
      sonar-project-key:
        description: 'Sonar project key for analysis. It must be specified explicitly, as the qubership-core-infra repository may have its own sonar-project-key. '
        required: false
        type: string

      # Additional artifact
      build-test-service-image:
        description: 'Optional key, can be specified if component tests require docker artefacts'
        required: false
        type: boolean

    secrets:
      sonar-token:
        description: 'Token for Sonar authentication'
        required: false

jobs:
  prepare-variables:
    name: Prepare build variables
    runs-on: ubuntu-latest
    outputs:
      run-sonar: ${{ steps.prepare.outputs.run-sonar }}
      test-service-tags: ${{ steps.load_component.outputs.tags }}
      test-service-context: ${{ steps.load_component.outputs.context }}
      test-service-file: ${{ steps.load_component.outputs.file }}
      test-service-platforms: ${{ steps.load_component.outputs.platforms }}
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: netcracker/qubership-core-infra
          ref: main
          path: workflow-repo

      - name: Prepare variables
        id: prepare
        run: |
          # Store input variables
          ACTOR="${{ inputs.actor }}"
          CONFIG_FILE="workflow-repo/.github/config/build-config.yaml"

          # Validate config file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error:: Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # Check if actor is restricted
          if yq e '.restricted-actors[]' "$CONFIG_FILE" | grep -Fxq "$ACTOR"; then
            IS_RESTRICTED_ACTOR=true
            echo "::info:: Actor $ACTOR is restricted"
          else
            IS_RESTRICTED_ACTOR=false
            echo "::info:: Actor $ACTOR is not restricted"
          fi

          # Set sonar run flag
          if [ -z "${{ inputs.sonar-project-key }}" ] || [ -z "${{ secrets.sonar-token }}" ]; then
            echo "::info:: Sonar configuration is missing, skipping Sonar analysis"
            echo "run-sonar=false" >> $GITHUB_OUTPUT
          elif [ "$IS_RESTRICTED_ACTOR" = true ]; then
            echo "run-sonar=false" >> $GITHUB_OUTPUT
          else
            echo "run-sonar=true" >> $GITHUB_OUTPUT
          fi

      - name: Output build configuration
        run: |
          echo "::info:: Run Sonar: ${{ steps.prepare.outputs.run-sonar }}" 

      - name: Checkout repository
        if: ${{ inputs.build-test-service-image }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Load Test Service Docker Configuration
        if: ${{ inputs.build-test-service-image }}
        id: load_component
        shell: bash
        run: |
            config_file="$GITHUB_WORKSPACE/.github/test-service-config.json"
            verify=$(cat "$config_file" | jq '
              def verify_structure:
                .components as $components
                | .platforms as $platforms
                | ($components | type == "array")
                and (all($components[]; has("tags") and has("file") and has("context")))
                and ($platforms | type == "string");
              verify_structure
              | if . then true else false end
            ')
            if [ "${verify}" == "true" ]; then
              echo "✅ $config_file file is valid"
              tags=$(jq -r ".components[].tags" "$config_file")
              platforms=$(jq -r ".platforms" "$config_file")
              context=$(jq -r ".components[].context" "$config_file")
              file=$(jq -r ".components[].file" "$config_file")
            else
              echo "❗ $config_file file is invalid"
              echo "❗ $config_file file is invalid" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
            echo "tags=${tags}" >> "$GITHUB_OUTPUT"
            echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"
            echo "context=${context}" >> "$GITHUB_OUTPUT"
            echo "file=${file}" >> "$GITHUB_OUTPUT"
  build:
    needs: prepare-variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: ${{ inputs.build-test-service-image }}
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        if: ${{ inputs.build-test-service-image }}
        uses: docker/setup-buildx-action@v3

      - name: Build and load test-service image
        if: ${{ inputs.build-test-service-image }}
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: |
            ${{ needs.prepare-variables.outputs.test-service-tags }}
          context: ${{ needs.prepare-variables.outputs.test-service-context }}
          file: ${{ needs.prepare-variables.outputs.test-service-file }}
          platforms: ${{ needs.prepare-variables.outputs.test-service-platforms }}  

      - name: Find go.mod files
        id: find
        run: |
          echo "::info:: Processing go.mod file location..."
          
          if [ -n "${{ inputs.go-module-dir }}" ]; then
            # If go-module-dir is specified, only look in that directory
            GO_MOD_DIR="${{ inputs.go-module-dir }}"
            GO_MOD_FILE="${GO_MOD_DIR}/go.mod"
            
            if [ ! -d "$GO_MOD_DIR" ]; then
              echo "::error:: Directory not found: ${GO_MOD_DIR}"
              exit 1
            fi
            
            if [ ! -f "$GO_MOD_FILE" ]; then
              echo "::error:: go.mod file not found in directory: ${GO_MOD_DIR}"
              exit 1
            fi
            
            echo "::info:: Using specified Go module directory: ${GO_MOD_DIR}"
          else
            # Search for go.mod files in the repository
            echo "::info:: Searching for go.mod files..."
            GO_MOD_FILES=$(find . -name go.mod)
            
            if [ -z "$GO_MOD_FILES" ]; then
              echo "::error:: No go.mod files found in the repository"
              exit 1
            fi
            
            echo "::info:: Counting go.mod files..."
            GO_MOD_COUNT=$(echo "$GO_MOD_FILES" | wc -l)
            if [ "$GO_MOD_COUNT" -gt 1 ]; then
              echo "::error:: Multiple go.mod files found. Please specify go-module-dir input parameter."
              exit 1
            fi
            
            GO_MOD_FILE=$(echo "$GO_MOD_FILES" | head -n 1)
            GO_MOD_DIR=$(dirname "${GO_MOD_FILE}")
            echo "::info:: Using Go module at ${GO_MOD_DIR}"
          fi
          
          echo "GO_MOD_FILE=${GO_MOD_FILE}" >> $GITHUB_ENV
          echo "GO_MOD_DIR=${GO_MOD_DIR}" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          cache: true
          cache-dependency-path: "**/*.sum"
          go-version-file: "${{ env.GO_MOD_FILE }}"

      - name: Test with coverage
        working-directory: ${{ env.GO_MOD_DIR }}
        run: |
          echo "::info:: Running tests with coverage..."
          go test -v ./... -coverprofile coverage.out

      - name: Upload coverage report to SonarCloud
        if: needs.prepare-variables.outputs.run-sonar == 'true'
        working-directory: ${{ env.GO_MOD_DIR }}
        run: |
          echo "::info:: Installing sonar-scanner..."
          npm install -g sonar-scanner@3.1.0
          
          echo "::info:: Validating sonar-project.properties exists"
          if [ ! -f "sonar-project.properties" ]; then
            echo "::error:: sonar-project.properties not found in ${GO_MOD_DIR}"
            exit 1
          fi
          
          echo "::info:: Running sonar-scanner..."
          sonar-scanner \
            -Dproject.settings=sonar-project.properties \
            -Dsonar.projectKey=${{ inputs.sonar-project-key }} \
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
            -Dsonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
