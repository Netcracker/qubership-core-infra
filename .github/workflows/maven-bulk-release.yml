# $schema: https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-workflow.json

name: "Maven bulk release"

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: |-
          Repositories to release in json format:
          ["Netcracker/repository-1", "Netcracker/repository-2", "Netcracker/repository-3"]
        required: true
        type: string
#      type:
#        description: "Version part to increment"
#        type: choice
#        options:
#          - patch
#          - minor
#          - major
#        default: patch


permissions:
  actions: write
  contents: write
  packages: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      MAVEN_USER: "x-access-token"
      MAVEN_TOKEN: ${{ secrets.maven-token }}
      MAVEN_GPG_PASSPHRASE: ${{ secrets.maven-gpg-passphrase }}

    steps:
      - name: Create snared GAVs file
        run: |
          echo "" > gavs.txt

      - name: Upload clean gavs artifact
        uses: actions/upload-artifact@v4
        with:
          name: "gavs-${{ github.run_id }}"
          path: gavs.txt
          overwrite: true

  release:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.repositories) }}
      max-parallel: 1
    env:
      GH_TOKEN: ${{ secrets.MAVEN_RELEASE_DEV_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: '${{ github.repository }}'
          ref: "main"

      - name: "Run '${{ matrix.repository }}' repository release"
        uses: "./.github/actions/maven-release"
        with:
          repository: "${{ matrix.repository }}"
          directory: "${{ matrix.repository }}"
          artifact-name: "gavs-${{ github.run_id }}"
          maven-token: ${{ secrets.MAVEN_RELEASE_DEV_TOKEN }}
          maven-gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          maven-gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

#      - name: "Run '${{ matrix.repository }}' repository release"
#        # language="shell script"
#        run: |
#          set -x
#          repo="${{ matrix.repository }}"
#          runId="${{ github.run_id }}"
#          gh workflow run maven-release.yml --repo $repo --ref main \
#          --field run-id=$runId \
#          --field gavs-cache-path=output \
#          --field gavs-cache-key=maven-release-output-$runId
#
#          WORKFLOW_RUN_ID=""
#          while [[ -z "WORKFLOW_RUN_ID" ]]; do
#            WORKFLOW_RUN_ID=$(gh run list --repo $repo --json name,id | jq -r --arg prefix "[$runId]" '.[] | select(.name | startswith($prefix)) | .id')
#            echo "WORKFLOW_RUN_ID: $WORKFLOW_RUN_ID"
#            if [[ -z "$WORKFLOW_RUN_ID" ]]; then
#              sleep 5
#            fi
#          done
#          echo "WORKFLOW_RUN_ID=${WORKFLOW_RUN_ID}" >> $GITHUB_ENV
#      - name: "Wait for '${{ matrix.repository }}' repository release to complete"
#        # language="shell script"
#        run: |
#          set -x
#          STATUS=""
#          while [[ "$STATUS" != "completed" ]]; do
#            STATUS=$(gh run view $WORKFLOW_RUN_ID --repo ${{ matrix.repository }}  --json status -q .status)
#            echo "Current status: $STATUS"
#            if [[ "$STATUS" == "completed" ]]; then
#              CONCLUSION=$(gh run view $WORKFLOW_RUN_ID --repo ${{ matrix.repository }}  --json conclusion -q .conclusion)
#              echo "Workflow completed with conclusion: $CONCLUSION"
#              if [[ "$CONCLUSION" != "success" ]]; then
#                echo "Workflow failed with conclusion: $CONCLUSION"
#                exit 1
#              fi
#            else
#              sleep 5
#            fi
#          done
