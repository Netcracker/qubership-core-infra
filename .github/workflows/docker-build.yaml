name: Build Docker with Matrix Strategy

on:
  workflow_call:
    inputs:
      tags:
        required: false
        type: string
        default: ''
        description: 'Tags'
      dry-run:
        required: true
        type: boolean
        default: false
        description: 'Dry run'
      config-filename:
        required: false
        type: string
        default: 'docker-dev-config.json'
        description: 'Set name only or short path inside .github folder if required'
permissions:
  contents: read
  packages: write

jobs:
  load_config:
    name: "Load Docker Configuration"
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.load_component.outputs.components }}
      platforms: ${{ steps.load_component.outputs.platforms }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Docker Configuration
        id: load_component
        shell: bash
        run: | 
          config_file="$GITHUB_WORKSPACE/.github/${{ inputs.dry-run }}"
          verify=$(cat "$config_file" | jq '
            def verify_structure:
              .components as $components
              | .platforms as $platforms
              | ($components | type == "array")
              and (all($components[]; has("name") and has("file") and has("context")))
              and ($platforms | type == "string");
            verify_structure
            | if . then true else false end
          ')
          if [ "${verify}" == "true" ]; then
            echo "✅ $config_file file is valid"
            components=$(jq -c ".components" "$config_file")
            platforms=$(jq -c ".platforms" "$config_file")
          else
            echo "❗ $config_file file is invalid"
            echo "❗ $config_file file is invalid" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "components=${components}" >> "$GITHUB_OUTPUT"
          echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"

  perform-version:
    runs-on: ubuntu-latest
    needs: [load_config]
    outputs:
      metadata: "${{ steps.metadata.outputs.result }}"
      tags: "${{ steps.prepare_tags.outputs.tags }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get configuration file
        run: |
          curl https://raw.githubusercontent.com/Netcracker/qubership-core-infra/main/.github/metadata-action-go-config.yml -o .github/metadata-action-go-config.yml

      - name: Create name
        uses: netcracker/qubership-workflow-hub/actions/metadata-action@main
        id: metadata
        with:
          configuration-path: .github/metadata-action-go-config.yml
          short-sha: 7
          default-template: "{{ref-name}}-{{timestamp}}-{{github.context.runNumber}}, {{ref-name}}-{{short-sha}}, {{ref-name}}-snapshot"

      - name: Echo metadata
        run: echo "Metadata result ${{ steps.metadata.outputs.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Prepare tags
        id: prepare_tags
        run: |
          BASE_TAG="${{ steps.metadata.outputs.result }}"
          EXTRA_TAG="${{ inputs.tags }}"
          if [ -n "$EXTRA_TAG" ]; then
            TAGS="${BASE_TAG}, ${EXTRA_TAG}"
          else
            TAGS="${BASE_TAG}"
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "tags: ${TAGS}" >> $GITHUB_STEP_SUMMARY
          echo "github.head_ref = ${{ github.head_ref }}"
  build:
    name: "Build Docker Images"
    needs: [load_config, perform-version]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.load_config.outputs.components) }}
    steps:
      - name: Docker
        uses: netcracker/qubership-workflow-hub/actions/docker-action@main
        with:
          ref: ${{ github.ref }}
          dry-run: ${{ inputs.dry-run }}
          download-artifact: false
          component: ${{ toJson(matrix.component) }}
          platforms: ${{ needs.load_config.outputs.platforms }}
          tags: ${{ needs.perform-version.outputs.tags }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}