# $schema: https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-action.json
name: "Maven release"
inputs:
  run-id:
    description: "run_id of the bulk release"
    required: true
  java-version:
    description: "java version to use for 'actions/setup-java' action"
    required: true
  maven-envs:
    description: "envs in format 'env1=val1,env2=val2' for mvn release plugin"
    required: true
  repository:
    description: "Repository in format: Owner/Repository"
    required: true
  directory:
    description: "Directory to checkout to"
    required: false
    default: "temp"
  releaseVersion:
    description: "Release version"
    required: false
  artifact-name:
    description: "Shared artifact with GAVs"
    required: true
  backup-artifact-name:
    description: "Shared artifact with release backup files"
    required: true
  maven-token:
    description: "Maven token"
    required: true
  maven-gpg-private-key:
    description: "Maven gpg-private-key"
    required: true
  maven-gpg-passphrase:
    description: "Maven gpg-passphrase"
    required: true

runs:
  using: "composite"

  steps:
    - name: Mandatory file for rollback
      shell: bash
      # language="shell script"
      run: |
        set -x
        touch "release-backup"

    - name: Mandatory upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.backup-artifact-name }}"
        path: |
          release-backup
        overwrite: true

    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: '${{ inputs.repository }}'
        ref: "main"
        token: '${{ inputs.maven-token }}'
        path: ${{ inputs.directory }}

    - name: Download gavs artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        repository: "Netcracker/qubership-core-infra"

    - name: Read GAVs
      id: read-gavs
      shell: bash
      # language="shell script"
      run: |
        set -x
        gavs=$(cat gavs.txt)
        gavs=$(echo "$gavs" | tr '\n' ',')
        gavs=${gavs%,}
        echo "gavs=${gavs}" >> "$GITHUB_OUTPUT"

    - name: Set up JDK
      uses: actions/setup-java@v4
      env:
        MAVEN_USER: "x-access-token"
        MAVEN_TOKEN: ${{ inputs.maven-token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
      with:
        java-version: "${{ inputs.java-version }}"
        distribution: 'temurin'
        cache: maven
        server-id: github
        server-username: MAVEN_USER
        server-password: MAVEN_TOKEN
        gpg-private-key: ${{ inputs.maven-gpg-private-key }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Set up Git
      shell: bash
      working-directory: ${{ inputs.directory }}
      # language="shell script"
      run: |-
        git config user.email "actions@github.com"
        git config user.name "actions"
        git remote set-url origin https://x-access-token:${{ inputs.maven-token }}@github.com/${{ inputs.repository }}

    - name: Update dependencies
      id: update
      shell: bash
      working-directory: ${{ inputs.directory }}
      env:
        gavs: ${{ steps.read-gavs.outputs.gavs }}
        MAVEN_USER: "x-access-token"
        MAVEN_TOKEN: ${{ inputs.maven-token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
      # language="shell script"
      run: |-
        set -x
        IFS=','
        for gav in $gavs; do
          if [ -z "$gav" ]; then
            continue 
          fi
          IFS=":"
          read -r groupID artifactId version <<< "$gav"
          ga="$groupID:$artifactId"
          cmd="mvn -B versions:use-dep-version -Dincludes=$ga -DdepVersion=$version"
          eval "$cmd"
          cmd="mvn -B versions:update-properties -Dincludes=$ga -Dmaven.version.ignore=^\(?!$version\).+\$"
          eval "$cmd"
          IFS=','
        done
        
        git diff --quiet &
        bg_pid=$!
        wait $bg_pid || exit_code=$?
        exit_code=${exit_code:-0}        
        if [ "$exit_code" -ne 0 ]; then
          git add -u
          git commit -m 'updating dependencies before release'
        fi

    - name: Release:prepare
      id: release-prepare
      shell: bash
      working-directory: ${{ inputs.directory }}
      env:
        GAVS: ${{ steps.read-gavs.outputs.gavs }}
        MAVEN_USER: "x-access-token"
        MAVEN_TOKEN: ${{ inputs.maven-token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
      # language="shell script"
      run: |-
        set -x
        mavenEnvs="${{ inputs.maven-envs }}"
        IFS=','
        for env in $mavenEnvs; do
          if [ -z "$env" ]; then
            continue 
          fi
          IFS="="
          read -r key value <<< "$env"
          export "$key"="$value"
          IFS=','
        done

        mvn -B release:prepare -Dresume=false -DautoVersionSubmodules=true -DreleaseVersion=${{ inputs.releaseVersion }}
        all_gavs="${GAVS}"
        cat 'release.properties'
        gavs=`cat 'release.properties' | grep 'project.rel.' | sed 's/project.rel.//g' | sed 's/\\\\//g' | sed 's/=/:/g' | tr '\n' ','`
        gavs=${gavs%,}
        if [ -z "$all_gavs" ]; then
          all_gavs="$gavs"
        else
          all_gavs="$all_gavs"$','"$gavs"
        fi        
        echo "gavs=${gavs}" >> "$GITHUB_OUTPUT"
        echo "all_gavs=${all_gavs}" >> "$GITHUB_OUTPUT"

        echo "files after release:prepare"
        ls -R

    - name: Backup maven release files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "${{ inputs.backup-artifact-name }}"
        path: |-
          **/pom.xml.releaseBackup
          **/release.properties
        overwrite: true

    - name: Release:perform
      id: release-perform
      shell: bash
      working-directory: ${{ inputs.directory }}
      env:
        MAVEN_USER: "x-access-token"
        MAVEN_TOKEN: ${{ inputs.maven-token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
      # language="shell script"
      run: |-
        set -x
        mvn -B release:perform -DlocalCheckout=true -DautoVersionSubmodules=true

        pwd
        echo "files after release:perform"
        ls -R        

    - name: Write GAVs summary
      shell: bash
      env:
        GAVS: ${{ steps.release-prepare.outputs.gavs }}
        ALL_GAVS: ${{ steps.release-prepare.outputs.all_gavs }}
      # language="shell script"
      run: |
        set -x
        path="gavs.txt"
        all_gavs=$(echo "${ALL_GAVS}" | tr ',' '\n')
        gavs=$(echo "${GAVS}" | tr ',' '\n')
        echo "$all_gavs" > $path
        cat $path
        echo "#### released artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "$gavs" >> $GITHUB_STEP_SUMMARY

    - name: Upload updated gavs artifact
      uses: actions/upload-artifact@v4
      with:
        name: gavs-${{ inputs.run-id }}
        path: gavs.txt
        overwrite: true
