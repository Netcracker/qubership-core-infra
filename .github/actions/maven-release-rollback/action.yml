# $schema: https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-action.json
name: "Maven release rollback"
inputs:
  run-id:
    description: "run_id of the bulk release"
    required: true
  java-version:
    description: "java version to use for 'actions/setup-java' action"
    required: true
  repository:
    description: "Repository in format: Owner/Repository"
    required: true
  directory:
    description: "Directory to checkout to"
    required: false
    default: "temp"
  releaseVersion:
    description: "Release version"
    required: false
  artifact-name:
    description: "Shared artifact with GAVs"
    required: true
  backup-artifact-name:
    description: "Shared artifact with release backup files"
    required: true
  maven-token:
    description: "Maven token"
    required: true
  maven-gpg-private-key:
    description: "Maven gpg-private-key"
    required: true
  maven-gpg-passphrase:
    description: "Maven gpg-passphrase"
    required: true

runs:
  using: "composite"

  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: '${{ inputs.repository }}'
        ref: "main"
        token: '${{ inputs.maven-token }}'
        path: ${{ inputs.directory }}
        fetch-depth: 0
        fetch-tags: true

    - name: Download maven release backup files
      uses: actions/download-artifact@v4
      with:
        name: "${{ inputs.backup-artifact-name }}"
        repository: "${{ inputs.repository }}"

    - name: List files after backup-restore
      shell: bash
      working-directory: ${{ inputs.directory }}
      # language="shell script"
      run: |-
        set -x
        pwd
        echo "files after download-artifact"
        ls -R        

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK
      uses: actions/setup-java@v4
      env:
        MAVEN_USER: "x-access-token"
        MAVEN_TOKEN: ${{ inputs.maven-token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
      with:
        java-version: "${{ inputs.java-version }}"
        distribution: 'temurin'
        server-id: github
        server-username: MAVEN_USER
        server-password: MAVEN_TOKEN
        gpg-private-key: ${{ inputs.maven-gpg-private-key }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Set up Git
      shell: bash
      working-directory: ${{ inputs.directory }}
      # language="shell script"
      run: |-
        git config user.email "actions@github.com"
        git config user.name "actions"
        git remote set-url origin https://x-access-token:${{ inputs.maven-token }}@github.com/${{ inputs.repository }}

    - name: Get modules
      id: get-modules
      shell: bash
      working-directory: ${{ inputs.directory }}
      # language="shell script"
      run: |-
        set -x
        gavs=$(cat "release.properties" | grep "project.rel." | sed 's/project.rel.//' | sed 's/=/:/' | sed 's/\\//' | tr '\n' ',' )
        gavs=${gavs%,}
        echo "gavs=${gavs}" >> "$GITHUB_OUTPUT"

    - name: Rollback release
#      if: ${{ hashFiles('pom.xml.releaseBackup') != '' }}
      shell: bash
      working-directory: ${{ inputs.directory }}
      env:
        MAVEN_USER: "x-access-token"
        MAVEN_TOKEN: ${{ inputs.maven-token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.maven-gpg-passphrase }}
      # language="shell script"
      run: |-
        mvn -B release:rollback

    - name: Remove packages versions
      shell: bash
      working-directory: ${{ inputs.directory }}
      env:
        GAVS: ${{ steps.get-modules.outputs.gavs }}
        MAVEN_TOKEN: ${{ inputs.maven-token }}
      # language="shell script"
      run: |-
        IFS=','
        for gav in ${GAVS}; do
          if [ -z "${gav}" ]; then
            continue
          fi
          IFS=":"
          echo "gav=${gav}"
          read -r groupID artifactId version <<< "${gav}"
          echo "groupID=${groupID}"
          echo "artifactId=${artifactId}"
          echo "version=${version}"
          url="https://api.github.com/orgs/Netcracker/packages/maven/${groupID}.${artifactId}/versions"
          echo "url=${url}"
          response=$(curl -s -o /tmp/response_body -w "%{http_code}" "${url}" --header "Authorization: Bearer ${MAVEN_TOKEN}")
          http_code=$response
          response_body=$(< /tmp/response_body)
          echo "response code: $http_code"
          echo "response Body: $response_body"
          
          if [[ $http_code -eq 200 ]]; then
            packageVersionId=$(echo "${response_body}" | jq -r '.[] | select(.name == "'"${version}"'") | .id')
            echo "packageVersionId=${packageVersionId}"
            if [ -n "${packageVersionId}" ]; then
                curl --request DELETE "https://api.github.com/orgs/Netcracker/packages/maven/${groupID}.${artifactId}/versions/${packageVersionId}" --header "Authorization: Bearer ${MAVEN_TOKEN}"
            fi
          elif [[ $http_code -eq 404 ]]; then
            echo "package not found"
            continue
          else
            echo "invalid response"
            exit 1
          fi
          IFS=','
        done

    - name: Remove artifacts from .m2
      shell: bash
      working-directory: ${{ inputs.directory }}
      env:
        GAVS: ${{ steps.get-modules.outputs.gavs }}
        MAVEN_TOKEN: ${{ inputs.maven-token }}
      # language="shell script"
      run: |-
        IFS=','
        for gav in ${GAVS}; do
          if [ -z "${gav}" ]; then
          continue
          fi
          IFS=":"
          echo "gav=${gav}"
          read -r groupID artifactId version <<< "${gav}"
          echo "groupID=${groupID}"
          echo "artifactId=${artifactId}"
          echo "version=${version}"
          groupPath=$(echo ${groupID} | tr '.' '/')
          echo "version=${version}"
          rm -rf "~/.m2/repository/${groupPath}/${artifactId}/${version}"
        IFS=','
        done
